"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[1179],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=l(r),d=a,h=p["".concat(c,".").concat(d)]||p[d]||m[d]||o;return r?n.createElement(h,s(s({ref:t},u),{},{components:r})):n.createElement(h,s({ref:t},u))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5571:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const o={sidebar_position:1},s="Async Rust",i={unversionedId:"rust/async_rust",id:"rust/async_rust",title:"Async Rust",description:"Concurrency Models",source:"@site/docs/rust/async_rust.md",sourceDirName:"rust",slug:"/rust/async_rust",permalink:"/personal-docs/docs/rust/async_rust",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rust/async_rust.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Rust",permalink:"/personal-docs/docs/category/rust"},next:{title:"Remove Special Characters from Data",permalink:"/personal-docs/docs/sql/remove-special-chars-from-data"}},c={},l=[{value:"Concurrency Models",id:"concurrency-models",level:2},{value:"Async in Rust",id:"async-in-rust",level:2}],u={toc:l},p="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"async-rust"},"Async Rust"),(0,a.kt)("h2",{id:"concurrency-models"},"Concurrency Models"),(0,a.kt)("p",null,"Concurrency can be achieved in many ways. The most common ones are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"OS Threads"),": The OS schedules threads and the threads run in parallel. This is the most common way of achieving concurrency in most languages. However, synchronization between threads is hard and error-prone. Thread Pools can mitigate some of these but within limit.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Event-driven Programming"),": The program is driven by events. The program is single-threaded and the events are handled sequentially. This is the most common way of achieving concurrency in JavaScript. However, the program can be blocked by a long-running event handler. Utilizes callbacks.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Coroutines"),": The program is single-threaded and the coroutines are scheduled by the program. This is the most common way of achieving concurrency in Go. However, while a large number of tasks can be run in parallel, the abstraction to achieve this level of simplicity comes at the cost of finer control.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Actor Model"),": All concurrent tasks are actors. Actors are single-threaded and communicate with each other by sending messages. This is the most common way of achieving concurrency in Erlang. However, control flow and retry logic is not simple."))),(0,a.kt)("h2",{id:"async-in-rust"},"Async in Rust"),(0,a.kt)("p",null,"Rust's implementation is slighly different from other languages."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Futures are inert"),": Futures will only make progress when polled, dropping it will stop it from making further progress."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Async is zero-cost"),": Async can be used without heap allocations and dynamic dispatch, which offers great performance. Good for embedded systems."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"No built-in runtime"),": Rust has no built-in runtime, which means that you can choose the runtime that best fits your needs from crates."))}m.isMDXComponent=!0}}]);