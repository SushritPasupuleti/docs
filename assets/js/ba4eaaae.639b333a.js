"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[3071],{3905:(e,t,n)=>{n.d(t,{Zo:()=>i,kt:()=>k});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=o.createContext({}),p=function(e){var t=o.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},i=function(e){var t=p(e.components);return o.createElement(u.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,u=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,k=c["".concat(u,".").concat(m)]||c[m]||d[m]||r;return n?o.createElement(k,l(l({ref:t},i),{},{components:n})):o.createElement(k,l({ref:t},i))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=m;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[c]="string"==typeof e?e:a,l[1]=s;for(var p=2;p<r;p++)l[p]=n[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6319:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var o=n(7462),a=(n(7294),n(3905));const r={sidebar_position:3},l="Proxmox GPU Sharing Passthrough",s={unversionedId:"proxmox/gpu-passthrough",id:"proxmox/gpu-passthrough",title:"Proxmox GPU Sharing Passthrough",description:"Share one GPU with any number of VMs created using Proxmox",source:"@site/docs/proxmox/gpu-passthrough.md",sourceDirName:"proxmox",slug:"/proxmox/gpu-passthrough",permalink:"/personal-docs/docs/proxmox/gpu-passthrough",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/proxmox/gpu-passthrough.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Proxmox Remote Development Server Setup",permalink:"/personal-docs/docs/proxmox/remote-development-setup"},next:{title:"Proxmox Docker Setup",permalink:"/personal-docs/docs/proxmox/docker-setup"}},u={},p=[{value:"Note",id:"note",level:2},{value:"Setup",id:"setup",level:2},{value:"Installing Dependencies",id:"installing-dependencies",level:3},{value:"Enable IOMMU",id:"enable-iommu",level:3},{value:"Load VFIO modules On Boot",id:"load-vfio-modules-on-boot",level:3},{value:"Blacklist Nouveau Drivers (in favour of official ones)",id:"blacklist-nouveau-drivers-in-favour-of-official-ones",level:3},{value:"Install NVIDIA Drivers",id:"install-nvidia-drivers",level:3}],i={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,o.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"proxmox-gpu-sharing-passthrough"},"Proxmox GPU Sharing Passthrough"),(0,a.kt)("p",null,"Share one GPU with any number of VMs created using Proxmox"),(0,a.kt)("h2",{id:"note"},"Note"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Gave up on this because of the dependency on the proprietary driver.")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"If you have a dGPU and iGPU, try direct passthrough. As it stands now, GPU sharing is locked to Enterprise, which I didn't realize until half way through the guide.")),(0,a.kt)("h2",{id:"setup"},"Setup"),(0,a.kt)("p",null,"Add sources"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"nano /etc/apt/sources.list\n")),(0,a.kt)("p",null,"in Nano add:"),(0,a.kt)("p",null,"(For v6.x)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"deb http://download.proxmox.com/debian/pve buster pve-no-subscription\n")),(0,a.kt)("p",null,"(For v7.x)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"deb http://download.proxmox.com/debian/pve bullseye pve-no-subscription\n")),(0,a.kt)("h3",{id:"installing-dependencies"},"Installing Dependencies"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"apt update\napt -y upgrade\napt -y install git build-essential pve-headers dkms jq mdevctl\n\npip3 install frida\n")),(0,a.kt)("p",null,"Get Scripts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/DualCoder/vgpu_unlock\ngit clone https://github.com/mbilker/vgpu_unlock-rs\n")),(0,a.kt)("p",null,"Install Rust"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Select 1")),(0,a.kt)("p",null,"Headers Install"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"wget http://download.proxmox.com/debian/dists/bullseye/pve-no-subscription/binary-amd64/pve-headers-5.13.19-2-pve_5.13.19-4_amd64.deb\n\ndpkg -i pve-headers-5.13.19-2-pve_5.13.19-4_amd64.deb\n")),(0,a.kt)("p",null,"Clutch Moment - Get Nvivida KVM Drivers from the official site and download them to CWD."),(0,a.kt)("h3",{id:"enable-iommu"},"Enable IOMMU"),(0,a.kt)("p",null,"Edit Grub"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"nano /etc/default/grub\n")),(0,a.kt)("p",null,"Comment out:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-grub"},'GRUB_CMDLINE_LINUX_DEFAULT="quiet"\n')),(0,a.kt)("p",null,"Based on your CPU Vendor (intel/amd), add:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-grub"},'GRUB_CMDLINE_LINUX_DEFAULT="quiet intel_iommu=on iommu=pt"\n#   - OR -\nGRUB_CMDLINE_LINUX_DEFAULT="quiet amd_iommu=on iommu=pt"\n')),(0,a.kt)("p",null,"Update Grub"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"update-grub\n")),(0,a.kt)("h3",{id:"load-vfio-modules-on-boot"},"Load VFIO modules On Boot"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"echo 'vfio' >> /etc/modules\necho 'vfio_iommu_type1' >> /etc/modules\necho 'vfio_pci' >> /etc/modules\necho 'vfio_virqfd' >> /etc/modules\n")),(0,a.kt)("p",null,"Run only once. Check the file first with nano using:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"nano /etc/modules\n")),(0,a.kt)("h3",{id:"blacklist-nouveau-drivers-in-favour-of-official-ones"},"Blacklist Nouveau Drivers (in favour of official ones)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'echo "options kvm ignore_msrs=1" >> /etc/modprobe.d/kvm.conf\necho "blacklist nouveau" >> /etc/modprobe.d/blacklist.conf\n')),(0,a.kt)("p",null,"Again, run this only once. Check the file first with nano using:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"nano /etc/modprobe.d/blacklist.conf\n")),(0,a.kt)("p",null,"Update Kernel Changes"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"update-initramfs -u\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Reboot")),(0,a.kt)("h3",{id:"install-nvidia-drivers"},"Install NVIDIA Drivers"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"chmod -R +x vgpu_unlock\nchmod +x NVIDIA------.run\n./NVIDIA------.run  --dkms\n")),(0,a.kt)("p",null,"Note: Replace ------ with the correct driver version."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"--dkms")," is mandatory for it to be loaded as a kernel module."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Yes and Ok")))}d.isMDXComponent=!0}}]);