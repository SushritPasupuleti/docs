"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[4202],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>g});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=o.createContext({}),l=function(e){var n=o.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},s=function(e){var n=l(e.components);return o.createElement(u.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,u=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),p=l(t),m=r,g=p["".concat(u,".").concat(m)]||p[m]||d[m]||a;return t?o.createElement(g,c(c({ref:n},s),{},{components:t})):o.createElement(g,c({ref:n},s))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,c=new Array(a);c[0]=m;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i[p]="string"==typeof e?e:r,c[1]=i;for(var l=2;l<a;l++)c[l]=t[l];return o.createElement.apply(null,c)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7161:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var o=t(7462),r=(t(7294),t(3905));const a={},c="Concurrency in Go",i={unversionedId:"golang/concurrency",id:"golang/concurrency",title:"Concurrency in Go",description:"Unlike python and javascript, go has built-in support for concurrency. This is achieved by using goroutines and channels.",source:"@site/docs/golang/concurrency.md",sourceDirName:"golang",slug:"/golang/concurrency",permalink:"/personal-docs/docs/golang/concurrency",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/golang/concurrency.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Web Development",permalink:"/personal-docs/docs/golang/web-dev"},next:{title:"Resources",permalink:"/personal-docs/docs/resources"}},u={},l=[{value:"Sample code",id:"sample-code",level:2},{value:"Understanding <code>sync</code> package",id:"understanding-sync-package",level:2},{value:"<code>sync.WaitGroup</code>",id:"syncwaitgroup",level:3},{value:"Rewriting the above code using <code>sync.WaitGroup</code>",id:"rewriting-the-above-code-using-syncwaitgroup",level:2},{value:"Channels",id:"channels",level:2},{value:"Creating a channel",id:"creating-a-channel",level:3},{value:"Sending a value to a channel",id:"sending-a-value-to-a-channel",level:3},{value:"Receiving a value from a channel",id:"receiving-a-value-from-a-channel",level:3},{value:"Closing a channel",id:"closing-a-channel",level:3},{value:"Sample code",id:"sample-code-1",level:3}],s={toc:l},p="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,o.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"concurrency-in-go"},"Concurrency in Go"),(0,r.kt)("p",null,"Unlike ",(0,r.kt)("inlineCode",{parentName:"p"},"python")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"javascript"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"go")," has built-in support for concurrency. This is achieved by using ",(0,r.kt)("inlineCode",{parentName:"p"},"goroutines")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"channels"),"."),(0,r.kt)("h2",{id:"sample-code"},"Sample code"),(0,r.kt)("p",null,"Consider the following non-concurrent code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\nimport (\n    "fmt"\n)\n\n//Prints out the numbers from 0 to count\nfunc producer(count int) {\n    for i := 0; i < count; i++ {\n        fmt.Println("Generated: %d\\n", i)\n    }\n}\n\n//Prints out the numbers from 0 to count (in concurrent model, it should print out\n//the numbers from `producer`.\nfunc consumer(count int) {\n    for i := 0; i < count; i++ {\n        fmt.Println("Consumed: %d\\n", i)\n    }\n}\n\nfunc main() {\n    producer(3)\n    consumer(3)\n}\n')),(0,r.kt)("p",null,"The output of the above code is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"Generated: 0\nGenerated: 1\nGenerated: 2\nConsumed: 0\nConsumed: 1\nConsumed: 2\n")),(0,r.kt)("h2",{id:"understanding-sync-package"},"Understanding ",(0,r.kt)("inlineCode",{parentName:"h2"},"sync")," package"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"sync")," package provides primitives to synchronize parts of the program."),(0,r.kt)("h3",{id:"syncwaitgroup"},(0,r.kt)("inlineCode",{parentName:"h3"},"sync.WaitGroup")),(0,r.kt)("p",null,"It simply ",(0,r.kt)("em",{parentName:"p"},"waits")," for a collection of goroutines to finish, it maintains a count of how many tasks need to be completed, before being done."),(0,r.kt)("p",null,"The count is decremented by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"wg.Done()")," and set by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"wg.Add()"),"."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"WaitGroup")," waits for the count to reach zero with ",(0,r.kt)("inlineCode",{parentName:"p"},"wg.Wait()"),"."),(0,r.kt)("h2",{id:"rewriting-the-above-code-using-syncwaitgroup"},"Rewriting the above code using ",(0,r.kt)("inlineCode",{parentName:"h2"},"sync.WaitGroup")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n    "sync"\n)\n\n//Prints out the numbers from 0 to count\nfunc producer(count int, wg *sync.WaitGroup) {\n    //executes wg.Done() when the function exits\n    //hence the WaitGroup count is decremented by 1 i.e it is set to 1 from 2\n    defer wg.Done()\n\n    for i := 0; i < count; i++ {\n        fmt.Println("Generated: %d\\n", i)\n    }\n}\n\n//Prints out the numbers from 0 to count (in concurrent model, it should print out\n//the numbers from `producer`.\nfunc consumer(count int, wg *sync.WaitGroup) {\n    //executes wg.Done() when the function exits\n    //hence the WaitGroup count is decremented by 1 i.e it is set to 0 from 1\n    //and the WaitGroup is completed\n    defer wg.Done()\n\n    for i := 0; i < count; i++ {\n        fmt.Println("Consumed: %d\\n", i)\n    }\n}\n\nfunc main() {\n    var wg sync.WaitGroup\n    wg.Add(2) //set the WaitGroup count to 2\n\n    go producer(3, &wg) //pass the WaitGroup as a pointer\n    go consumer(3, &wg)\n\n    wg.Wait() //wait for the WaitGroup count to reach 0\n    fmt.Println("Done")\n}\n')),(0,r.kt)("p",null,"The output of the above code is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"Generated: 0\nGenerated: 1\nConsumed: 0\nGenerated: 2\nConsumed: 1\nConsumed: 2\nDone\n")),(0,r.kt)("p",null,"The above output will have a slighly different order of execution each time you run the program."),(0,r.kt)("h2",{id:"channels"},"Channels"),(0,r.kt)("p",null,"Using ",(0,r.kt)("inlineCode",{parentName:"p"},"channels")," we can send and receive values between goroutines."),(0,r.kt)("h3",{id:"creating-a-channel"},"Creating a channel"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"x := make(chan <type>)\n")),(0,r.kt)("h3",{id:"sending-a-value-to-a-channel"},"Sending a value to a channel"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"x <- value\n")),(0,r.kt)("h3",{id:"receiving-a-value-from-a-channel"},"Receiving a value from a channel"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"another_var := <- x\n")),(0,r.kt)("h3",{id:"closing-a-channel"},"Closing a channel"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"close(x)\n")),(0,r.kt)("h3",{id:"sample-code-1"},"Sample code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n    "sync"\n)\n\n//Prints out the numbers from 0 to count\nfunc producer(count int, ch chan <- int, wg *sync.WaitGroup) { //send only channel\n    //executes wg.Done() when the function exits\n    //hence the WaitGroup count is decremented by 1 i.e it is set to 1 from 2\n    defer wg.Done()\n\n    for i := 0; i < count; i++ {\n        fmt.Println("Generated: %d\\n", i)\n        ch <- i //send the value to the channel\n    }\n}\n\n//Prints out the numbers from 0 to count (in concurrent model, it should print out\n//the numbers from `producer`.\nfunc consumer(count int, ch <- chan int wg *sync.WaitGroup) { //receive only channel\n    //executes wg.Done() when the function exits\n    //hence the WaitGroup count is decremented by 1 i.e it is set to 0 from 1\n    //and the WaitGroup is completed\n    defer wg.Done()\n\n    for num in range ch {\n        fmt.Println("Consumed: %d\\n", num)\n    }\n}\n\nfunc main() {\n    nums := make(chan int) //create a channel\n\n    var wg sync.WaitGroup\n    wg.Add(2) //set the WaitGroup count to 2\n\n    go consumer(3, nums, &wg) //pass the channel as an argument\n    producer(3, nums, &wg)\n\n    close(nums) //close the channel\n\n    wg.Wait() //wait for the WaitGroup count to reach 0\n    fmt.Println("Done")\n}\n')),(0,r.kt)("p",null,"The output of the above code is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"Generated: 0\nConsumed: 0\nGenerated: 1\nConsumed: 1\nGenerated: 2\nConsumed: 2\nDone\n")))}d.isMDXComponent=!0}}]);